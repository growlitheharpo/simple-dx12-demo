#include "resource.h"

#include "gfx/resource_flags.h"
#include "gfx/resource_state.h"
#include "gfx/util.h"

#include <d3d12.h>

DECLARE_EQUIVALENT_ENUM(ResourceState, D3D12_RESOURCE_STATES);
TEST_EQUIVALENT_ENUM(ResourceState::Common, D3D12_RESOURCE_STATE_COMMON);
TEST_EQUIVALENT_ENUM(ResourceState::VertexAndConstantBuffer, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER);
TEST_EQUIVALENT_ENUM(ResourceState::IndexBuffer, D3D12_RESOURCE_STATE_INDEX_BUFFER);
TEST_EQUIVALENT_ENUM(ResourceState::RenderTarget, D3D12_RESOURCE_STATE_RENDER_TARGET);
TEST_EQUIVALENT_ENUM(ResourceState::UnorderedAccess, D3D12_RESOURCE_STATE_UNORDERED_ACCESS);
TEST_EQUIVALENT_ENUM(ResourceState::DepthWrite, D3D12_RESOURCE_STATE_DEPTH_WRITE);
TEST_EQUIVALENT_ENUM(ResourceState::DepthRead, D3D12_RESOURCE_STATE_DEPTH_READ);
TEST_EQUIVALENT_ENUM(ResourceState::NonPixelShaderResource, D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE);
TEST_EQUIVALENT_ENUM(ResourceState::PixelShaderResource, D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE);
TEST_EQUIVALENT_ENUM(ResourceState::StreamOut, D3D12_RESOURCE_STATE_STREAM_OUT);
TEST_EQUIVALENT_ENUM(ResourceState::IndirectArgument, D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT);
TEST_EQUIVALENT_ENUM(ResourceState::CopyDest, D3D12_RESOURCE_STATE_COPY_DEST);
TEST_EQUIVALENT_ENUM(ResourceState::CopySource, D3D12_RESOURCE_STATE_COPY_SOURCE);
TEST_EQUIVALENT_ENUM(ResourceState::ResolveDest, D3D12_RESOURCE_STATE_RESOLVE_DEST);
TEST_EQUIVALENT_ENUM(ResourceState::ResolveSource, D3D12_RESOURCE_STATE_RESOLVE_SOURCE);
TEST_EQUIVALENT_ENUM(ResourceState::RaytacingAccelerationStructure, D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE);
TEST_EQUIVALENT_ENUM(ResourceState::ShadingRateSource, D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE);
TEST_EQUIVALENT_ENUM(ResourceState::GenericRead, D3D12_RESOURCE_STATE_GENERIC_READ);
TEST_EQUIVALENT_ENUM(ResourceState::Present, D3D12_RESOURCE_STATE_PRESENT);
TEST_EQUIVALENT_ENUM(ResourceState::Predication, D3D12_RESOURCE_STATE_PREDICATION);
TEST_EQUIVALENT_ENUM(ResourceState::VideoDecodeRead, D3D12_RESOURCE_STATE_VIDEO_DECODE_READ);
TEST_EQUIVALENT_ENUM(ResourceState::VideoDecodeWrite, D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE);
TEST_EQUIVALENT_ENUM(ResourceState::VideoProcessRead, D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ);
TEST_EQUIVALENT_ENUM(ResourceState::VideoProcessWrite, D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE);
TEST_EQUIVALENT_ENUM(ResourceState::VideoEncodeRead, D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ);
TEST_EQUIVALENT_ENUM(ResourceState::VideoEncodeWrite, D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE);

DECLARE_EQUIVALENT_ENUM(ResourceFlags, D3D12_RESOURCE_FLAGS);
TEST_EQUIVALENT_ENUM(ResourceFlags::None, D3D12_RESOURCE_FLAG_NONE);
TEST_EQUIVALENT_ENUM(ResourceFlags::AllowRenderTarget, D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET);
TEST_EQUIVALENT_ENUM(ResourceFlags::AllowDepthStencil, D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL);
TEST_EQUIVALENT_ENUM(ResourceFlags::AllowUnorderedAccess, D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS);
TEST_EQUIVALENT_ENUM(ResourceFlags::DenyShaderResource, D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE);
TEST_EQUIVALENT_ENUM(ResourceFlags::AllowCrossAdapter, D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER);
TEST_EQUIVALENT_ENUM(ResourceFlags::AllowSimultaneousAccess, D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS);
TEST_EQUIVALENT_ENUM(ResourceFlags::VideoDecodeReferenceOnly, D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY);
